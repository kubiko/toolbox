#!/bin/bash

# option override for the target arch
target_arch=""
snapcraft_yaml=""

# try to resolve snapcraft.yaml path in the current directory
lxd_get_snapcraft_yaml() {
  for sy in snapcraft.yaml snap/snapcraft.yaml build-aux/snapcraft.yaml build-aux/snap/snapcraft.yaml
  do
    if [ -e ${sy} ]; then
      snapcraft_yaml="${sy}"
      return
    fi
  done
  echo "failed to locate snapcraft.yaml"
  exit 0
}

# determine base or build-base, base takes priority
lxd_get_base() {
  local snapcraft_yaml="${1}"
  base=$(yq -r '.base' ${snapcraft_yaml})
  if [ "${base}" = "null" ]; then
    base=$(yq -r '.build-base' ${snapcraft_yaml})
  fi
  [ "${base}" = "null" ] && base=""
  # override "bare" to latest core24
  [ "${base}" = "bare" ] && base="core24"
  echo "${base}"
}

# If this is core22 base, in 9 out of 10 cases snapcraft will build too much unless --build-for
# is passed. Check supported target arches for a given host if more than 1 is supported
# pick one matching host or bail out asking the user which one to build
# There is really no good valid use case for day-to-day development to always build all supported arches.
# This often trashes development env if one wants to just run incremental build.
# This check requires 'yq' parser to be installed.
lxd_get_target_arch() {
  local snapcraft_yaml=${1}
  local base=${2}
  if [ "${base:4}" -ge "22" ] && [ -n "$(which yq)" ] && [[ $@ != *"--build-for"* ]]; then
    # determine host arch
    local host_arch="amd64"
    case $(uname -m) in
      aarch64)
        host_arch="arm64"
        ;;
      armv7l)
        host_arch="armhf"
        ;;
      riscv64)
        host_arch="riscv"
        ;;
      x86_64)
        host_arch="amd64"
        ;;
    esac
    local supported_arches="$(host_arch=${host_arch} yq '.architectures[] | select( [ .build-on[] | contains(env(host_arch)) ] | any) | .build-for' ${snapcraft_yaml})"
    # if there are more than 2 matching targets check if one matches host, if not bail
    if [ $(echo ${supported_arches} | wc -w) -gt 1 ]; then
      if [[ ${supported_arches} == *"${host_arch}"* ]]; then
        echo "snap arch definition supports multiple arches for this host, auto picking host matching one (${host_arch})" >&2
        target_arch="--build-for=${host_arch}"
        return 0
      else
        echo "Arch definition in snapcraft.yaml supports multiple arches for this host, please specify which one you want to build" >&2
        exit 0
      fi
    fi
  fi
  return 0
}

# check if we should source wrapper hellpers
wrapper=$(type lxd_snapcraft 2> /dev/null)
# if we can see /snap/toolbox/current/bin/snapcraft-lxd-wrapper source it
if [ -z "${wrapper}" ]; then
  . /snap/toolbox/current/bin/snapcraft-lxd-wrapper
fi

# if running outside of the container, call lxd_snapcraft
if [ "$(systemd-detect-virt)" = "none" ]; then
  # is this build or some other command?
  # extra params indicating build are: clean, cleanbuild, pull, build, stage, prime, pack, --build-for, --target-arch
  # ignore "--verbose" parameter
  action="${1}"
  [ "${action}" = "--verbose" ] && action="${2}" 
  if [ -n "${action}" ] && [ "${action}" != "clean" ] && [ "${action}" != "cleanbuild" ] && [ "${action}" != "pull" ] && [ "${action}" != "build" ] && [ "${action}" != "stage" ] && [ "${action}" != "prime" ] && [ "${action}" != "pack" ] && [ "${action}" != "--build-for" ] && [ "${action}" != "--target-arch" ]; then
    echo "Assuming non build related function, running directly"
    exec /snap/bin/snapcraft ${@}
  else
    echo "Assuming build should run in the container"
    lxd_snapcraft $@
  fi
else
  lxd_get_snapcraft_yaml
  lxd_get_target_arch ${snapcraft_yaml} $(lxd_get_base ${snapcraft_yaml})
  [ ! 0 -eq ${?} ] && return 0
  # invoke snapcraft
  exec /snap/bin/snapcraft $@ ${target_arch}
fi
