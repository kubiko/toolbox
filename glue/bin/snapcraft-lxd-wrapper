#!/bin/bash

# set script version, so we have some tracking
LXD_SCRIPT_VERSION="0.1"
IDENTITY_FILE="${HOME}/.ssh/id_rsa-lxd"
PUBLIC_KEY=${IDENTITY_FILE}.pub
SSH_CONFIG="${HOME}/.ssh/config"

print_help_lxd_ensure_container () {
  echo -e "lxd_ensure_container: helper script to ensure lxc container is created and running"
  echo -e "\tusage: lxd_ensure_container <Ubuntu Series> <name of the container to be created> [architecture]"
  echo -e "\t\t: Ubuntu Series: version of Ubuntu, e.g. xenial (16.04), bionic (18.04), focal (20.04.), etc"
  echo -e "\t\t: Container name to create"
  echo -e "\t\t: architecture: optional and only when applicable, e.g. armhf on arm64 host"
  echo -e "\n\te.g.  $ lxd_ensure_container focal my-focal"
  echo -e "\nCreated container will be automatically configured with following"
  echo -e "\t\t- enable multiarch on amd64 host"
  echo -e "\t\t- install ccache"
  echo -e "\t\t- share host .ssh with container"
  echo -e "\t\t- share host home under 'host' directory in the container"
  echo -e "\t\t- if proxy config is detected on host, it's shared with container (including sharing of host authenticator)"
  echo -e "\t\t- install snapcraft inside the container"
  echo -e "\t\t- if ther is git snap installed, share snap's gitconfig with the container"
  echo -e "\t\t- cleanup the container"
  echo -e "\t\t- and more...."
}

print_help_lxd_snapcraft () {
  echo -e "lxd_snapcraft: wrapper to run snapcraft in dedicated container"
  echo -e "\tWrapper has to be called from snapcraf project"
  echo -e "Usage: lxd_snapcraft [container arch] [snapcraft commands..]\n"
  echo -e "\tsnapcraft is run in the current directory, but inside the container"
  echo -e "\tname of the container is determined from project's snapcraft.yaml"
  echo -e "\t\tunless passed through env variable 'snapcraft_lxd_container_name"
  echo -e "\tcontainer name is constructed as 'snapcraft-<ubuntu series>[-<architecture>]'"
  echo -e "\t\tcontainers with native architecture do not have arch in the name"
  echo -e "\t\tif container does not exist, it will be created"
  echo -e "\t\tone container is shared for all the builds for given core base and arch"
  echo -e "\tCorrent Ubuntu series is determined from snapcraft.yaml\n"
  echo -e "\tFirst parameter is treated specially, if it's 'armhf', it signals"
  echo -e "\t\tto use armhf container. (this is only avaiable on arm64 host)\n"
  echo -e "\t-h: this help\n"
  echo -e "examples:"
  echo -e "\t\$ lxd_snapcraft"
  echo -e "\t\$ lxd_snapcraft clean"
  echo -e "\t\$ lxd_snapcraft prime --target-arch=armhf"
  echo -e "\t\$ lxd_snapcraft armhf prime"
}

lxd_ensure_ssh_setup () {
  # get ssh keys ready
  if [ ! -f ${IDENTITY_FILE} ]; then
    ssh-keygen -t rsa -C "${USER}@lxd" -N "" -f ${IDENTITY_FILE}
  fi
  # ensure public key is in authorised_keys
  # don't assume there is always ${HOME}/.ssh/authorized_keys
  if [ ! -e ${HOME}/.ssh/authorized_keys ] || [ -z "$(grep "$(cat ${PUBLIC_KEY})" ${HOME}/.ssh/authorized_keys)" ]; then
    # check is thre is new line in authorised keys so we don't mangle last key
    if [ ! -e ${HOME}/.ssh/authorized_keys ] || [ -z "$(tail -c 1 ${HOME}/.ssh/authorized_keys)" ]; then
      cat ${PUBLIC_KEY} >> ${HOME}/.ssh/authorized_keys
    else
      echo >> ${HOME}/.ssh/authorized_keys
      cat ${PUBLIC_KEY} >> ${HOME}/.ssh/authorized_keys
    fi
  fi

  if [ ! -f ${SSH_CONFIG} ] || [ -z "$(grep -Pzo  'Host \*.lxd\n  User ubuntu\n  ProxyCommand lxd-ssh %h\n  StrictHostKeyChecking no\n  IdentityFile ' ${SSH_CONFIG} | tr -d  '\0')" ]; then
    echo -e \
      "\nHost *.lxd\n  User ubuntu\n  ProxyCommand lxd-ssh %h\n  StrictHostKeyChecking no\n  IdentityFile ${IDENTITY_FILE}\n" \
      >> ${SSH_CONFIG}
    chmod 600 ${SSH_CONFIG}
  fi

  # make sure we have lxd-ssh in path
  if [ -z "$(which lxd-ssh)" ];then
    if [ ! -d ~/bin ]; then
      mkdir -p ~/bin
      export PATH=$PATH:${HOME}/bin
    fi
    curl -s https://raw.githubusercontent.com/kubiko/toolbox/master/glue/bin/lxd-ssh > ~/bin/lxd-ssh
    if [ ! -s ~/bin/lxd-ssh ]; then
      rm ~/bin/lxd-ssh
      echo "curl does not work, is there proxy configured?"
      echo "Does following line work:"
      echo -e "\t$ curl -s https://raw.githubusercontent.com/kubiko/toolbox/master/glue/bin/lxd-ssh"
      exit 0
    fi
    chmod +x ~/bin/lxd-ssh
  fi
}

# ensure lxd is installed
lxd_ensure () {
  # check if lxd is installed. And make sure we are not using lxd from deb
  if [ -z "$(which lxd)" ]; then
    # install and configure lxd
    [ -e ~/.lxd-wrapper-configured ] && rm ~/.lxd-wrapper-configured
    echo "Installing lxd..."
    snap install lxd
  else
    if [ -f /usr/bin/lxc ] || [ -f /usr/bin/lxd ]; then
      echo "There is deb version of lxd installed. Please remove it by runnig:"
      echo "$ sudo apt-get remove -y lxd"
      echo "$ sudo apt-get remove -y lxd-client"
      exit 0
    fi
  fi

  # make sure user is in lxd group
  if [ -z "$(groups | grep lxd )" ]; then
    if [ -e /var/lib/extrausers/group ] && [ -z "$(grep lxd:x:999:${USER} /var/lib/extrausers/group)" ]; then
      echo "Adding current user to lxd group"
      sudo sed -i 's|lxd:x:999:.*|lxd:x:999:'"${USER}"'|g' /var/lib/extrausers/group
      echo "Re run last command as user group is going to be reloaded and current shell replaced with new one including lxd group "
      exec sg lxd newgrp `id -gn`
    else
      echo "Adding ${USER} to lxd group, sudo needed"
      sudo usermod -a -G lxd ${USER}
      echo "Re run last command as user group is going to be reloaded and current shell replaced with new one including lxd group "
      newgrp lxd
    fi
  fi

  # make sure we have configured ssh setup
  lxd_ensure_ssh_setup

  # if lxd is configured bail out here
  if [ -e ~/.lxd-wrapper-configured ]; then
    return 0
  fi

  # make sure lxd is initialised
  local lxd_dump="$(lxd init --dump)"
  if [ -n "$(echo "${lxd_dump}" | grep 'storage_pools: \[\]')" ]; then
    echo "Initialising lxd..."
    # if there is zfs support, use zfs as backend
    # on classic we need sudo for dmesg, so check for zfs instead
    if [ -n "$(which lsb_release)" ] && [ -n "$(which zfs)" ] || [ -n "$(dmesg | grep ZFS)" ]; then
      lxd init --auto --storage-backend=zfs
    else
      # no zfs availablem, on classic use dir backend instead, on core try btrfs
      if [ ! -d /writable ]; then
        echo "Initializing lxd with 'dir' storage-backend, consider enabling zfs"
        lxd init --auto --storage-backend=dir
      else
        echo "Detected Ubuntu Core environment"
        echo "Kernel does not support zfs, and dir storage-backend does not support sudo withing the containers"
        echo "Using btrfs backend instead, consider enabling zfs..."
        lxd init --auto --storage-backend=btrfs
      fi
    fi
    echo -e "#cloud-config\nssh_authorized_keys:\n - $(cat ${PUBLIC_KEY})" | lxc profile set default user.user-data -
    lxc profile show default
  elif [ -z "$(echo "${lxd_dump}" | grep "$(cat ${PUBLIC_KEY})")" ]; then
    echo -e "#cloud-config\nssh_authorized_keys:\n - $(cat ${PUBLIC_KEY})" | lxc profile set default user.user-data -
  fi
  # touch file to signal lxd was fully configured
  touch ~/.lxd-wrapper-configured
}

lxd_wait_container_ready() {
  local container_name="${1}"

  echo -n -e "${wait_text}\r"
  # consider container fully started only when it gets ip address
  while [ -z "$(lxc list -q -c s4 ${container_name} | sed -n '4p' |  awk '{print tolower($0)}' | awk -F "[[:space:]]*|[[:space:]]*" '{if ($2 == "running" && $4 != "|") print $4}')" ]
  do
      wait_text="${wait_text}."
      echo -n -e "${wait_text}\r"
      sleep 1
  done
}

lxd_start_container() {
  local container_name="${1}"

  lxc start ${container_name} || true
  local wait_text="Waiting for container to start.."
  sleep 1
  lxd_wait_container_ready ${container_name}
  echo -e "${wait_text}..DONE"
}

lxd_ensure_container_runnig() {
  if [ -z "${1}" ]; then
    echo "Missing container name"
    return 1
  fi
  local container_name="${1}"
  local quiet="no"
  [ -n "${2}" ] &&  quiet="${2}"
  local container_status=$(lxc info ${container_name} 2>&1 | awk '$1 ~ "Status" { print $2}' | awk '{print tolower($0)}')
  if [ -z "${container_status}" ]; then
    if [ "${quiet}" != "yes" ]; then
      echo -e "Container \"${container_name}\" does not exist."
    fi
    return 1
  fi
  if [ "running" == "${container_status,,}" ]; then
      lxd_wait_container_ready ${container_name}
      return 0
  fi
  if [ "${quiet}" != "yes" ]; then
    echo -e "Container ${container_name} is not running, starting it..."
  fi
  lxd_start_container ${container_name}
  return 0
}

lxd_ensure_container () {
  # normalise series, we only support UC16/18/20 and related LTS
  # 22.04 -> jammy
  # 20.04 -> focal
  # 18.04 -> bionic
  # 16.04 -> xenial
  case $1 in
    23.04 | lunar)
      local ubuntu_series="lunar"
      ;;
    22.10 | kinetic)
      local ubuntu_series="kinetic"
      ;;
    22.04 | jammy)
      local ubuntu_series="jammy"
      ;;
    20.04 | focal)
      local ubuntu_series="focal"
      ;;
    18.04 | bionic)
      local ubuntu_series="bionic"
      ;;
    16.04 | xenial)
      local ubuntu_series="xenial"
      ;;
    --help | -h)
      print_help_lxd_ensure_container
      return 0
      ;;
    *)
      echo "Could not verify Ubuntu series, still giving it try)"
      local ubuntu_series="${1}"
      ;;
  esac

  if [ -z "${2}" ]; then
    echo "Missing container name"
    print_help_lxd_ensure_container
    return 1
  fi
  local container_name="${2}"

  if lxd_ensure_container_runnig ${container_name} "yes"; then
    return "$?"
  fi

  if [ -n "${3}" ]; then
    # create container of defined architecture
    ubuntu_series="${ubuntu_series}/${3}"
  fi

  # container does not exist, create it
  lxc init ubuntu-daily:${ubuntu_series} ${container_name}

  echo "Configuring new container..."
  # override template, as sometimes snapcraft tries to be too smart
  local tmp_sources=$(mktemp -u -q)
  curl -s https://people.canonical.com/~okubik/sources.list.ubuntu.lxd.tmpl > ${tmp_sources}
  lxc file push ${tmp_sources} ${container_name}/etc/cloud/templates/sources.list.ubuntu.tmpl
  [ -e ${tmp_sources} ] && rm ${tmp_sources}
  echo -en "uid $(id -u) 1000\ngid $(id -g) 1000" | lxc config set ${container_name} raw.idmap -
  # check if kernel version is 5.x, enough to enable mknod interception, to support debootstrap
  # we cannot enable it for all the kernels, container would refuse to boot
  if [ "$(uname -a | awk '{print $3}' | awk -F . '{print $1}')" -ge 5 ]; then
    echo -e "Enabling debootstrap support"
    lxc config set ${container_name} security.syscalls.intercept.mknod=true
    lxc config set ${container_name} security.syscalls.intercept.setxattr=true
    lxc config device add ${container_name} home disk source=$HOME path=/home/ubuntu/host
    lxc config device add ${container_name} sshconf disk source=$HOME/.ssh path=/home/ubuntu/.ssh
  fi
  # if there is X server socket on host, make it avaiable in the container for GUI apps
  if [ -e /tmp/.X11-unix/X0 ]; then
    lxc config device add ${container_name} xorg-socket disk source=/tmp/.X11-unix/X0 path=/tmp/.X11-unix/X0
  fi

  # if there is git snap install, share gitconfig with container
  if [ -e ${HOME}/snap/git-ondra/common/.gitconfig ]; then
    lxc config device add ${container_name} gitconfig disk source=${HOME}/snap/git-ondra/common/.gitconfig path=/home/ubuntu/.gitconfig
  fi

  lxd_start_container ${container_name}

  lxc exec ${container_name} -- sh -c 'cp -r /etc/skel/. /home/ubuntu'
  lxc exec ${container_name} -- sh -c 'echo "export SNAPCRAFT_BUILD_ENVIRONMENT=host" >> /etc/environment'
  lxc exec ${container_name} -- sh -c 'echo "export SNAPCRAFT_ENABLE_EXPERIMENTAL_TARGET_ARCH=true" >> /etc/environment'
  # snapcraft 7.x does not like to run apt as root, setup wrappers if this jammy container
  if [ "${ubuntu_series}" == "jammy" ]; then
    local tmp_wrapper=$(mktemp -u -q)
    tee ${tmp_wrapper} <<EOF
#!/bin/sh
# do not force sudo use for all the options as that can cause problems
if [ "\${1}" = "changelog" ] || [ "\${1}" = "download" ] || [ "\${1}" = "source" ]; then
  /usr/bin/apt "\$@"
else
  sudo /usr/bin/apt "\$@"
fi
EOF

    lxc file push ${tmp_wrapper} ${container_name}/usr/local/bin/apt
    tee ${tmp_wrapper} <<EOF
#!/bin/sh
# do not force sudo use for all the options as that can cause problems
if [ "\${1}" = "changelog" ] || [ "\${1}" = "download" ] || [ "\${1}" = "source" ]; then
  /usr/bin/apt-get "\$@"
else
  sudo /usr/bin/apt-get "\$@"
fi
EOF

    lxc file push ${tmp_wrapper} ${container_name}/usr/local/bin/apt-get
    tee ${tmp_wrapper} <<EOF
#!/bin/sh
# do not force sudo use for all the options as that can cause problems
if [ "\${1}" = "--extract" ] || [ "\${1}" = "-x" ] || [ "\${1}" = "--print-architecture" ] || [ "\${1}" = "--print-avail" ] \
   || [ "\${1}" = "--print-foreign-architectures" ] || [ "\${1}" = "--list" ] || [ "\${1}" = "-l" ] || [ "\${1}" = "--listfiles" ] \
   || [ "\${1}" = "-L" ] ||[ "\${1}" = "--search" ] || [ "\${1}" = "-S" ] || [ "\${1}" = "--unpack" ] || [ "\${1}" = "--vextract" ] \
   || [ "\${1}" = "-X" ] || [ "\${1}" = "--info" ] || [ "\${1}" = "-I" ]; then
  /usr/bin/dpkg "\$@"
else
  sudo /usr/bin/dpkg "\$@"
fi
EOF

    lxc file push ${tmp_wrapper} ${container_name}/usr/local/bin/dpkg
    tee ${tmp_wrapper} <<EOF
#!/bin/sh
sudo /usr/bin/apt-key "\$@"
EOF

    lxc file push ${tmp_wrapper} ${container_name}/usr/local/bin/apt-key
    tee ${tmp_wrapper} <<EOF
#!/bin/sh
sudo /usr/bin/add-apt-repository "\$@"
EOF

    lxc file push ${tmp_wrapper} ${container_name}/usr/local/bin/add-apt-repository
    tee ${tmp_wrapper} <<EOF
#!/bin/sh
sudo /usr/bin/apt-cache "\$@"
EOF

    lxc file push ${tmp_wrapper} ${container_name}/usr/local/bin/apt-cache
    tee ${tmp_wrapper} <<EOF
#!/bin/sh
sudo /usr/bin/apt-config "\$@"
EOF

    lxc file push ${tmp_wrapper} ${container_name}/usr/local/bin/apt-config
    tee ${tmp_wrapper} <<EOF
#!/bin/sh
if [ "\${1}" = "install" ]; then
  sudo /usr/bin/snap "\$@"
else
  /usr/bin/snap "\$@"
fi
EOF

    lxc file push ${tmp_wrapper} ${container_name}/usr/local/bin/snap

    [ -e ${tmp_wrapper} ] && rm ${tmp_wrapper}
    lxc exec ${container_name} -- sh -c 'chown root:root /usr/local/bin/*'
    lxc exec ${container_name} -- sh -c 'chmod 755 /usr/local/bin/*'
    lxc exec ${container_name} -- sed -i 's|PATH=\"\(.*\)\"|PATH=\"\1\:/snap/bin\"|g' /etc/environment
  fi

  # if host has proxy, configure it inside container as well
  if [ -n "${http_proxy}" ]; then
    lxc exec ${container_name} -- sh -c "echo 'export http_proxy=${http_proxy}' >> /etc/environment"
    lxc exec ${container_name} -- sh -c "snap set system proxy.http=$http_proxy"
    if [ -n "${https_proxy}" ];then
      lxc exec ${container_name} -- sh -c "echo 'export https_proxy=${https_proxy}' >> /etc/environment"
      lxc exec ${container_name} -- sh -c "snap set system proxy.https=${http_proxy}"
    else
      lxc exec ${container_name} -- sh -c "echo 'export https_proxy=${http_proxy}' >> /etc/environment"
      lxc exec ${container_name} -- sh -c "snap set system proxy.https=${https_proxy}"
    fi
    if [ -n "${ftp_proxy}" ];then
      lxc exec ${container_name} -- sh -c "echo 'export ftp_proxy=${ftp_proxy}' >> /etc/environment"
    else
      lxc exec ${container_name} -- sh -c "echo 'export ftp_proxy=${http_proxy}' >> /etc/environment"
    fi
    lxc exec ${container_name} -- sh -c "echo 'Acquire::http::Proxy \"$http_proxy\";' > /etc/apt/apt.conf.d/proxy"
    # if proxy points to local host, bind host port into the container
    if [[ $http_proxy =~ "localhost:" ]]; then
      case ${http_proxy} in
        localhost:*)
          local proxy_port="$(echo ${http_proxy} | cut -c 11-)"
          ;;
        http://localhost:*)
          local proxy_port="$(echo ${http_proxy} | cut -c 18-)"
          ;;
      esac
      lxc config device add ${container_name} hostproxy proxy \
             listen=tcp:127.0.0.1:${proxy_port} \
             connect=tcp:127.0.0.1:${proxy_port} \
             bind=guest
    fi
    if [ -f ${HOME}/.netrc ]; then
      echo "Sharing host netrc auth file with container"
      lxc config device add ${container_name} netrc disk source=$HOME/.netrc path=/home/ubuntu/.netrc
    fi
  fi
  # done configuring proxy

  # check if we need cross compilation source
  if [ -n "$(uname -a | grep "x86_64")" ]; then
    lxc exec ${container_name} -- sh -c 'dpkg --add-architecture arm64'
    lxc exec ${container_name} -- sh -c 'dpkg --add-architecture armhf'
  fi
  lxc exec ${container_name} -- sh -c 'apt-get update'
  # clean container from not needed packages
  lxc exec ${container_name} -- sh -c 'apt-get remove -y lxd'
  lxc exec ${container_name} -- sh -c 'apt-get remove -y lxd-client'
  lxc exec ${container_name} -- sh -c 'apt-get -y autoremove'
  lxc exec ${container_name} -- sh -c 'apt-get purge'

  # install ccache
  lxc exec ${container_name} -- sh -c 'apt-get -y install ccache'

  # finishing touches
  lxc exec ${container_name} -- sh -c 'chown ubuntu:ubuntu /home/ubuntu'
  lxc exec ${container_name} -- sh -c 'find /home/ubuntu/ -maxdepth 1 -type f -name ".*" -exec chown ubuntu:ubuntu {} \;'

  # wait till system is seeded to install snapcraft
  wait_text="waiting for container to finish snap seeding"
  while [ -z "$(lxc exec ${container_name} -- sh -c 'systemctl status snapd.seeded.service | grep "Active" | grep "exited"')" ]
  do
      wait_text="${wait_text}."
      echo -n -e "${wait_text}\r"
      sleep 1
  done
  echo -e "${wait_text}..DONE"
  # disable automatic snapshots, not really needed for disposable container
  lxc exec ${container_name} -- sh -c 'snap set system snapshots.automatic.retention=no'
  # for some reason container has preinstalled lxd snap, remove it if it's there
  if [ -n "$(lxc exec ${container_name} -- sh -c 'snap list' | awk '{print $1}' | grep 'lxd')" ]; then
    lxc exec ${container_name} -- sh -c 'snap remove lxd'
  fi
  # install snapcraft snap from stable, in case of xenial, install from 4.x channel
  # xenial container is at this stage only used for snapd builds, so have it ready
  if [ "${ubuntu_series}" == "xenial" ]; then
    lxc exec ${container_name} -- sh -c 'snap install snapcraft --classic --channel 4.x/stable'
  else
    lxc exec ${container_name} -- sh -c 'snap install snapcraft --classic'
  fi
  if [ "${ubuntu_series}" == "jammy" ]; then
    lxc exec ${container_name} -- sh -c 'snap install core22'
  fi
}

lxd_snapcraft () {
  # handle special case first parameter:
  #   -h: print help, (snapcraft help is "snapcraft help)"
  #   armhf: arm64 can run natively armhf containers
  #          if first parameter is "armhf" interpret it as run build
  #          in "armhf" container on arm64 systems"
  if [ "${1}" = "-h" ]; then
    print_help_lxd_snapcraft
    exit 0
  elif [ "${1}" = "armhf" ]; then
    # first make sure we are on compatible platform
    if [ -z "$(uname -a | grep aarch64)" ]; then
      echo "This host does not seem to support native armhf containers"
      exit 0
    fi
    local container_flavour="-armhf"
    local container_arch="armhf"
    shift
  fi

  # check if lxd is installed, if installed assume it's configured as well
  lxd_ensure

  # make sure we have container and it's running
  if [ -z "${snapcraft_lxd_container_name}" ]; then
    # if there is snapcraft.yaml or snap/snapcraft.yaml in project root
    # or under build-aux dir
    # try to determine which container to use
    for sy in snapcraft.yaml snap/snapcraft.yaml build-aux/snapcraft.yaml build-aux/snap/snapcraft.yaml
    do
      if [ -e ${sy} ]; then
        local SNAPCRAFT_YAML="${sy}"
        continue
      fi
    done
    if [ -n "${SNAPCRAFT_YAML}" ]; then
      # use build-base and then base as means to determine build series
      local base=$(grep 'build-base:' ${SNAPCRAFT_YAML} | awk '{print $2}')
      [ -z "${base}" ] && base=$(grep 'base:' ${SNAPCRAFT_YAML} | awk '{print $2}')
      case ${base} in
        core16|core)
          local container_name="snapcraft-xenial${container_flavour}"
          local ubuntu_series="xenial"
          ;;
        core18)
          local container_name="snapcraft-bionic${container_flavour}"
          local ubuntu_series="bionic"
          ;;
        core20)
          local container_name="snapcraft-focal${container_flavour}"
          local ubuntu_series="focal"
          ;;
        core22)
          local container_name="snapcraft-jammy${container_flavour}"
          local ubuntu_series="jammy"
          ;;
        core24)
          local container_name="snapcraft-jammy${container_flavour}"
          local ubuntu_series="lunar"
          ;;
        *)
          echo "Base not defined, assuming Core 16"
          local container_name="snapcraft-xenial${container_flavour}"
          local ubuntu_series="xenial"
          ;;
      esac
      local snap_type=$(grep -m 1 'type:' ${SNAPCRAFT_YAML} | awk '{print $2}')
      # if we are building base or snapd, run build as root
      if [ "${snap_type}" == "base" ] || [ "${snap_type}" == "snapd" ]; then
        echo "Automatically building snap type ${snap_type} as root"
        local root_build="sudo "
      fi
    else
      echo -e "Not in snapcraft project directory, or container name defined\n"
      print_help_lxd_snapcraft
      exit 0
    fi
    # make sure container exists and its running
    lxd_ensure_container ${ubuntu_series} ${container_name} ${container_arch}
  else
    local container_name="${snapcraft_lxd_container_name}"
    # make sure contanier is running
    lxd_ensure_container_runnig ${container_name}
  fi

  # run snapcraft command if we have container ready
  if [ "$?" = "0" ]; then
    echo -e "Running snapcraft in '${container_name}' container:[snapcraft $@]"
    ssh -A -t -q ${container_name}.lxd "cd $(pwd | sed 's|'"${HOME}"'|/home/ubuntu/host|g');${root_build} snapcraft $@"
  else
    exit 0
  fi
}
